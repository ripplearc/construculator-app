<?xml version="1.0" encoding="UTF-8"?>
<mutations version="1.0">
   <files>
        <file>lib/libraries/logging/testing/test_app_logger.dart</file>
    </files>
    <rules>
        <regex pattern="(currentTag|currentEmojiPrefix)\s*=\s*(''|&quot;[^&quot;]*&quot;|'[^']*');" id="test_app_logger.field_assignment.mutateStringLiteral">
            <mutation text="$1 = &quot;mutatedString&quot;;"/>
        </regex>
        <regex pattern="(\w+\.isNotEmpty)" id="generic.boolean.invertIsNotEmpty">
            <mutation text="$1.isEmpty"/>
        </regex>
        <regex pattern="(loggedErrors|loggedStackTraces)\.add\([^)]+\);" id="test_app_logger.logging.skipListAdd">
            <mutation text=""/>
        </regex>
        <regex pattern="(loggedErrors|loggedStackTraces)\.clear\(\);" id="test_app_logger.clear_reset.skipListClear">
            <mutation text=""/>
        </regex>
        <regex pattern="(TestAppLogger\._private\([^)]*?)(''|&quot;[^&quot;]*&quot;|'[^']+')([^)]*?\))" id="test_app_logger.constructor.mutateStringArgument">
            <mutation text="$1&quot;mutatedPrivateArg&quot;$3"/>
        </regex>
        <regex pattern="TestAppLogger\._private\((newTag), (currentEmojiPrefix), (internalLogger)\);" id="test_app_logger.tag.swapArguments">
            <mutation text="TestAppLogger._private($2, $1, $3);"/>
        </regex>
        <regex pattern="(internalLogger)\.i\(" id="test_app_logger.internal_logger.change_i_to_w">
            <mutation text="$1.w("/>
        </regex>
        <regex pattern="if \((error|stackTrace)\s*!=\s*null\)" id="test_app_logger.condition.invertNeqNull">
            <mutation text="if ($1 == null)"/>
        </regex>
        <regex pattern="(internalLogger\.\w+\()_formatMessage\(([^)]+)\)([^)]*\))" id="test_app_logger.logging.removeFormatMessageCall" dotAll="true">
            <mutation text="$1$2$3"/>
        </regex>
    </rules>

    <commands>
           <command group="test_app_logger" expected-return="0">flutter test test/units/libraries/logging/fakes/test_app_logger_test.dart</command>
    </commands>

    <threshold failure="85">
        <rating over="85" name="A"/>
        <rating over="75" name="B"/>
        <rating over="65" name="C"/>
        <rating over="55" name="D"/>
        <rating over="35" name="E"/>
        <rating over="0" name="F"/>
    </threshold>
</mutations> 