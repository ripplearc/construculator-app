<?xml version="1.0" encoding="UTF-8"?>
<mutations version="1.0">
    <files>
        <file>lib/libraries/auth/testing/fake_auth_service.dart</file>
    </files>

    <exclude>
        <!-- Exclude abstract classes and interfaces -->
        <regex pattern="abstract\s+class\s+\w+.*?{.*?}" dotAll="true"/>
        <regex pattern="abstract\s+class\s+\w+[^{]*{" dotAll="true"/>
        
        <!-- Exclude logging statements -->
        <regex pattern="print\s*\(" dotAll="false"/>
        <regex pattern="debugPrint\s*\(" dotAll="false"/>
        <regex pattern="log\s*\(" dotAll="false"/>
        
        <!-- Exclude fake implementation boilerplate -->
        <regex pattern="@override" dotAll="false"/>
        
        <!-- Exclude simple return statements in fakes (often just test data) -->
        <regex pattern="return\s+\[\]" dotAll="false"/>
        <regex pattern="return\s+{}" dotAll="false"/>
    </exclude>

    <rules>
        <!-- Fake implementation logic mutations -->
        <literal text="&amp;&amp;" id="and-to-or">
            <mutation text="||"/>
        </literal>
        <literal text="||" id="or-to-and">
            <mutation text="&amp;&amp;"/>
        </literal>
        <literal text="==" id="equals">
            <mutation text="!="/>
        </literal>
        <literal text="!=" id="not-equals">
            <mutation text="=="/>
        </literal>
        
        <!-- Null safety for fake implementations -->
        <literal text="??" id="null-coalescing">
            <mutation text=""/>
        </literal>
        
        <!-- Boolean mutations for fake behavior -->
        <literal text="return true" id="return-true">
            <mutation text="return false"/>
        </literal>
        <literal text="return false" id="return-false">
            <mutation text="return true"/>
        </literal>
        
        <!-- String validation in fakes -->
        <literal text="isEmpty" id="is-empty">
            <mutation text="isNotEmpty"/>
        </literal>
        <literal text="isNotEmpty" id="is-not-empty">
            <mutation text="isEmpty"/>
        </literal>
        
        <!-- Conditional logic in fake implementations -->
        <regex pattern="[\s]if[\s]*\((.*?)\)[\s]*{" dotAll="true" id="if-negation">
            <mutation text=" if (!($1)) {"/>
        </regex>

        <!-- Mutate control flag assignments in reset() and constructor/setAuthenticated -->
        <regex pattern="loginShouldSucceed = true;" id="fakeAuthService.loginShouldSucceed.trueToFalse">
            <mutation text="loginShouldSucceed = false;"/>
        </regex>
        <regex pattern="otpShouldSucceed = true;" id="fakeAuthService.otpShouldSucceed.trueToFalse">
            <mutation text="otpShouldSucceed = false;"/>
        </regex>
        <regex pattern="resetPasswordShouldSucceed = true;" id="fakeAuthService.resetPasswordShouldSucceed.trueToFalse">
            <mutation text="resetPasswordShouldSucceed = false;"/>
        </regex>
        <regex pattern="emailCheckShouldSucceed = true;" id="fakeAuthService.emailCheckShouldSucceed.trueToFalse">
            <mutation text="emailCheckShouldSucceed = false;"/>
        </regex>

        <!-- Mutate direct usage of control flags -->
        <regex pattern="if \(loginShouldSucceed\)" id="fakeAuthService.ifLoginShouldSucceed.invert">
            <mutation text="if (!loginShouldSucceed)"/>
        </regex>
         <regex pattern="if \(otpShouldSucceed\)" id="fakeAuthService.ifOtpShouldSucceed.invert">
            <mutation text="if (!otpShouldSucceed)"/>
        </regex>
        <regex pattern="if \(!emailCheckShouldSucceed\)" id="fakeAuthService.ifNotEmailCheckShouldSucceed.invert">
            <mutation text="if (emailCheckShouldSucceed)"/>
        </regex>

        <!-- Mutate _isAuthenticated assignments -->
        <regex pattern="_isAuthenticated = true;" id="fakeAuthService.isAuthenticated.trueToFalse">
            <mutation text="_isAuthenticated = false;"/>
        </regex>
        <regex pattern="_isAuthenticated = false;" id="fakeAuthService.isAuthenticated.falseToTrue">
            <mutation text="_isAuthenticated = true;"/>
        </regex>

        <!-- Mutate return of isAuthenticated() -->
        <regex pattern="return _isAuthenticated;" id="fakeAuthService.isAuthenticated.returnInverted">
            <mutation text="return !_isAuthenticated;"/>
        </regex>

        <!-- Skip notifier calls -->
        <regex pattern="_notifier.emitAuthStateChanged\(AuthStatus.authenticated\);" id="fakeAuthService.skipEmitAuthStateAuthenticated">
            <mutation text="// _notifier.emitAuthStateChanged(AuthStatus.authenticated);"/>
        </regex>
        <regex pattern="_notifier.emitLogout\(\);" id="fakeAuthService.skipEmitLogout">
            <mutation text="// _notifier.emitLogout();"/>
        </regex>

        <!-- Mutate AuthStatus in _authStateController.add() -->
        <regex pattern="_authStateController.add\(AuthStatus.authenticated\);" id="fakeAuthService.authControllerAdd.authenticatedToUnauthenticated">
            <mutation text="_authStateController.add(AuthStatus.unauthenticated);"/>
        </regex>
        <regex pattern="_authStateController.add\(AuthStatus.unauthenticated\);" id="fakeAuthService.authControllerAdd.unauthenticatedToAuthenticated">
            <mutation text="_authStateController.add(AuthStatus.authenticated);"/>
        </regex>

        <!-- Mutate registeredEmails.contains(email) -->
        <regex pattern="return registeredEmails.contains\(email\);" id="fakeAuthService.isEmailRegistered.invertContains">
            <mutation text="return !registeredEmails.contains(email);"/>
        </regex>
        
        <!-- Mutate _currentUser = null -->
        <regex pattern="_currentUser = null;" id="fakeAuthService.currentUser.skipSetNull">
            <mutation text="// _currentUser = null;"/>
        </regex>

        <!-- Remove list clear operations in reset -->
        <regex pattern="loginCalls.clear\(\);" id="fakeAuthService.reset.removeLoginCallsClear">
            <mutation text="// loginCalls.clear();"/>
        </regex>
    </rules>

    <commands>
        <command group="fake-auth-service" expected-return="0">flutter test test/units/libraries/auth/fakes/services/fake_auth_service_test.dart</command>
    </commands>

    <threshold failure="85">
        <rating over="85" name="A"/>
        <rating over="75" name="B"/>
        <rating over="65" name="C"/>
        <rating over="55" name="D"/>
        <rating over="35" name="E"/>
        <rating over="0" name="F"/>
    </threshold>
</mutations> 