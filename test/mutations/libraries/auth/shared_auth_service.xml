<?xml version="1.0" encoding="UTF-8"?>
<mutations version="1.0">
    <files>
        <file>lib/libraries/auth/shared_auth_service.dart</file>
    </files>

    <rules>
        <!-- Core service logic mutations -->
        <literal text="&amp;&amp;" id="and-to-or">
            <mutation text="||"/>
        </literal>
        <literal text="||" id="or-to-and">
            <mutation text="&amp;&amp;"/>
        </literal>
        <literal text="==" id="equals">
            <mutation text="!="/>
        </literal>
        <literal text="!=" id="not-equals">
            <mutation text="=="/>
        </literal>
        
        <!-- Null safety mutations -->
        <literal text="??" id="null-coalescing">
            <mutation text=""/>
        </literal>
        
        <!-- Boolean return mutations -->
        <literal text="return true" id="return-true">
            <mutation text="return false"/>
        </literal>
        <literal text="return false" id="return-false">
            <mutation text="return true"/>
        </literal>
        
        <!-- String validation mutations -->
        <literal text="isEmpty" id="is-empty">
            <mutation text="isNotEmpty"/>
        </literal>
        <literal text="isNotEmpty" id="is-not-empty">
            <mutation text="isEmpty"/>
        </literal>
        
        <!-- Conditional logic mutations -->
        <regex pattern="[\s]if[\s]*\((.*?)\)[\s]*{" dotAll="true" id="if-negation">
            <mutation text=" if (!($1)) {"/>
        </regex>

        <!-- Mutations for result checks -->
        <regex pattern="if \(result.isSuccess &amp;&amp; result.data != null\)" id="sharedAuth.resultSuccessAndDataNotNull.invertSuccess">
            <mutation text="if (!result.isSuccess &amp;&amp; result.data != null)"/>
        </regex>
        <regex pattern="if \(result.isSuccess &amp;&amp; result.data != null\)" id="sharedAuth.resultSuccessAndDataNotNull.invertDataNull">
            <mutation text="if (result.isSuccess &amp;&amp; result.data == null)"/>
        </regex>
        <regex pattern="if \(result.isSuccess\)" id="sharedAuth.resultIsSuccess.invert">
            <mutation text="if (!result.isSuccess)"/>
        </regex>
        <regex pattern="if \(!result.isSuccess\)" id="sharedAuth.resultNotIsSuccess.invert">
            <mutation text="if (result.isSuccess)"/>
        </regex>

        <!-- Mutations for notifier calls -->
        <regex pattern="_notifier.emitAuthStateChanged\(status\);" id="sharedAuth.skipEmitAuthStateChangedStatus">
            <mutation text="// _notifier.emitAuthStateChanged(status);"/>
        </regex>
        <regex pattern="_notifier.emitLogout\(\);" id="sharedAuth.skipEmitLogout">
            <mutation text="// _notifier.emitLogout();"/>
        </regex>
        <regex pattern="_notifier.emitLogin\(credentials\);" id="sharedAuth.skipEmitLoginCredentials">
            <mutation text="// _notifier.emitLogin(credentials);"/>
        </regex>
        <regex pattern="_notifier.emitSetupProfile\(\);" id="sharedAuth.skipEmitSetupProfile">
            <mutation text="// _notifier.emitSetupProfile();"/>
        </regex>
        <regex pattern="_notifier.emitAuthStateChanged\(AuthStatus.authenticated\);" id="sharedAuth.emitAuthToUnauth">
            <mutation text="_notifier.emitAuthStateChanged(AuthStatus.unauthenticated);"/>
        </regex>
        <regex pattern="_notifier.emitAuthStateChanged\(AuthStatus.unauthenticated\);" id="sharedAuth.emitUnauthToAuth">
            <mutation text="_notifier.emitAuthStateChanged(AuthStatus.authenticated);"/>
        </regex>
        <regex pattern="_notifier.emitAuthStateChanged\(AuthStatus.connectionError\);" id="sharedAuth.emitErrorToAuth">
            <mutation text="_notifier.emitAuthStateChanged(AuthStatus.authenticated); /* Mutated from connectionError */"/>
        </regex>

        <!-- Mutations for isAuthenticated method -->
        <regex pattern="return _repository.isAuthenticated\(\);" id="sharedAuth.isAuthenticated.invertRepoCall">
            <mutation text="return !_repository.isAuthenticated();"/>
        </regex>

        <!-- Mutations for credential null checks -->
        <regex pattern="if \(credentials != null\)" id="sharedAuth.credentialsNotNull.invertToCheckNull">
            <mutation text="if (credentials == null)"/>
        </regex>
        <regex pattern="if \(credentials == null\)" id="sharedAuth.credentialsNull.invertToCheckNotNull">
            <mutation text="if (credentials != null)"/>
        </regex>
        
        <!-- Mutations for logout method -->
        <regex pattern="rethrow;" id="sharedAuth.logout.removeRethrow">
            <mutation text="_logger.warning(\'Rethrow removed by mutation\'); /* rethrow removed */"/>
        </regex>

        <!-- Mutations for dispose method -->
        <regex pattern="_authStateSubscription\?.cancel\(\);" id="sharedAuth.dispose.skipAuthStateCancel">
            <mutation text="// _authStateSubscription?.cancel();"/>
        </regex>
        <regex pattern="_userSubscription\?.cancel\(\);" id="sharedAuth.dispose.skipUserSubscriptionCancel">
            <mutation text="// _userSubscription?.cancel();"/>
        </regex>

        <!-- Mutate data != null check in isEmailRegistered -->
        <regex pattern="result.data \?\? false" id="sharedAuth.isEmailRegistered.invertDataBoolean">
            <mutation text="!(result.data ?? true)"/> <!-- Inverts the boolean logic for data -->
        </regex>

    </rules>

    <commands>
        <command group="auth-service" expected-return="0">flutter test test/units/libraries/auth/services/shared_auth_service_auth_methods_p1_test.dart</command>
        <command group="auth-service" expected-return="0">flutter test test/units/libraries/auth/services/shared_auth_service_auth_methods_p2_test.dart</command>
        <command group="auth-service" expected-return="0">flutter test test/units/libraries/auth/services/shared_auth_service_auth_methods_p3_test.dart</command>
        <command group="auth-service" expected-return="0">flutter test test/units/libraries/auth/services/shared_auth_service_state_errors_test.dart</command>
    </commands>

    <threshold failure="85">
        <rating over="85" name="A"/>
        <rating over="75" name="B"/>
        <rating over="65" name="C"/>
        <rating over="55" name="D"/>
        <rating over="35" name="E"/>
        <rating over="0" name="F"/>
    </threshold>
</mutations> 