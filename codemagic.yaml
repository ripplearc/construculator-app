workflows:
  pre-check:
    name: Pre-check
    instance_type: linux_x2
    environment:
      groups:
        - notification_emails
      # See https://docs.flutter.dev/install/archive#stable-channel for mapping between Dart and Flutter SDK versions
      flutter: 3.32.0
    triggering:
      events:
        - pull_request
      branch_patterns:
        - pattern: "*"
          include: true
          source: false
    cache:
      cache_paths:
        - .fvm/
        - ~/.gradle/caches
        - ~/.pub-cache
        - ios/Pods
        - $FLUTTER_ROOT/.pub-cache
    scripts:
      - name: Install FVM
        script: dart pub global activate fvm
      - name: Install Flutter version via FVM
        script: fvm install
      - name: Block skip-checks
        script: |
          # Fail if commit message contains "[skip ci]"
          if git log -1 --pretty=%B | grep -Eq "\[skip ci\]|\[ci skip\]"; then
            echo "‚ùå Skipping checks is not allowed!"
            exit 1
          fi
      - name: Clone and Checkout
        script: |
          git clone "$CM_REPO_URL" .
          git checkout "$CM_COMMIT"

      - name: Install Dependencies
        script: |
          export PATH="$PATH":"$HOME/.pub-cache/bin":"$FCI_BUILD_DIR/.fvm/flutter_sdk/bin"
          fvm flutter pub get

      - name: Run Code Analysis
        script: |
          export PATH="$PATH":"$HOME/.pub-cache/bin":"$FCI_BUILD_DIR/.fvm/flutter_sdk/bin"
          echo "Linux version: $(uname -a)"
          echo "Triggered By: $CM_BUILD_STARTED_BY"
          echo "üõ†Ô∏è Running Flutter analysis..."
          # Get the base commit (when the PR branched off the target branch)
          BASE_COMMIT=$(git merge-base HEAD origin/$CM_PULL_REQUEST_DEST)

          # Identify changed Dart files (lib/ and test/)
          CHANGED_DART_FILES=$(git diff --name-only  --diff-filter=d $BASE_COMMIT HEAD -- "lib/*.dart" "test/*.dart")

          if [ -z "$CHANGED_DART_FILES" ]; then
            echo "‚úÖ No Dart files modified. Skipping analysis."
            exit 0
          fi
          echo "üõ†Ô∏è Analyzing changed files:"
          echo "$CHANGED_DART_FILES"
          fvm flutter analyze --fatal-infos --fatal-warnings $CHANGED_DART_FILES

      - name: Run Unit Tests With Coverage
        script: |
          export PATH="$PATH":"$HOME/.pub-cache/bin":"$FCI_BUILD_DIR/.fvm/flutter_sdk/bin"
          # Find the common ancestor commit between source and target branches
          BASE_COMMIT=$(git merge-base HEAD origin/$CM_PULL_REQUEST_DEST)

          # Find changed test files
          CHANGED_UNIT_TESTS=$(git diff --name-only --diff-filter=d $BASE_COMMIT HEAD -- "test/units/*.dart")
          CHANGED_WIDGET_TESTS=$(git diff --name-only --diff-filter=d $BASE_COMMIT HEAD -- "test/widgets/*.dart")

          # Combine all changed tests
          CHANGED_TESTS="$CHANGED_UNIT_TESTS $CHANGED_WIDGET_TESTS"

          if [ -z "$CHANGED_TESTS" ]; then
            echo "‚úÖ No test files modified. Skipping tests..."
            exit 0
          fi
          echo "üîç Running tests for changed files:"
          echo "$CHANGED_TESTS"
          TARGET=$ARC_CODE_COVERAGE_TARGET
          if git log -1 --pretty=%B | grep -Eq "#DeltaCoverageLow|DCL"; then
            TARGET=$CODE_COVERAGE_MINIMUM
            echo "Using minimum coverage target: ${TARGET}% "
          fi
          HOMEBREW_NO_AUTO_UPDATE=1 brew install lcov
          mkdir -p test-results
          flutter test $CHANGED_TESTS --coverage --machine > test-results/flutter.json
          lcov --remove coverage/lcov.info '**/*.g.dart' '**/l10n/**' -o coverage/lcov.info
          # Compute coverage
          if [ ! -f "coverage/lcov.info" ] || [ ! -s "coverage/lcov.info" ]; then
            echo "‚ùå Coverage file coverage/lcov.info is missing or empty."
            exit 1
          fi

          LF_RAW=$(grep '^LF:' coverage/lcov.info | cut -d: -f2 || true)
          LH_RAW=$(grep '^LH:' coverage/lcov.info | cut -d: -f2 || true)

          if [ -z "$LF_RAW" ]; then
              LF_SUM=0
          else
              LF_SUM=$(echo "$LF_RAW" | awk '{sum+=$1} END {print sum}')
          fi

          if [ -z "$LH_RAW" ]; then
              LH_SUM=0
          else
              LH_SUM=$(echo "$LH_RAW" | awk '{sum+=$1} END {print sum}')
          fi
          
          if ! [[ "$LF_SUM" =~ ^[0-9]+$ ]]; then
              echo "‚ùå LF_SUM ($LF_SUM) is not a valid number. Cannot calculate coverage."
              exit 1
          fi
          if ! [[ "$LH_SUM" =~ ^[0-9]+$ ]]; then
              echo "‚ö†Ô∏è LH_SUM ($LH_SUM) is not a valid number. Assuming 0 lines hit for calculation."
              LH_SUM=0
          fi

          if [ "$LF_SUM" -eq 0 ]; then
            COVERAGE_PERCENT="0.00"
            echo "‚ö†Ô∏è LF (total lines found) is 0. Setting coverage to 0.00%."
          else
            COVERAGE_PERCENT=$(echo "scale=2; $LH_SUM*100/$LF_SUM" | bc)
          fi

          echo "Code Coverage: ${COVERAGE_PERCENT}%"

          if (( $(echo "$COVERAGE_PERCENT < $TARGET" | bc -l) )); then
            echo "‚ùå Coverage is $COVERAGE_PERCENT%, below $TARGET%"
            exit 1
          else
            echo "‚úÖ Coverage is $COVERAGE_PERCENT% (>= $TARGET%)"
          fi
        test_report: test-results/flutter.json
      - name: Run Changed Tests
        script: |
          export PATH="$PATH":"$HOME/.pub-cache/bin":"$FCI_BUILD_DIR/.fvm/flutter_sdk/bin"
          # Find the common ancestor commit between source and target branches
          BASE_COMMIT=$(git merge-base HEAD origin/$CM_PULL_REQUEST_DEST)
          
          # Find changed test files
          CHANGED_UNIT_TESTS=$(git diff --name-only --diff-filter=d $BASE_COMMIT HEAD -- "test/units/*.dart")
          CHANGED_WIDGET_TESTS=$(git diff --name-only --diff-filter=d $BASE_COMMIT HEAD -- "test/widgets/*.dart")

          # Combine all changed tests
          CHANGED_TESTS="$CHANGED_UNIT_TESTS $CHANGED_WIDGET_TESTS"

          if [ -z "$CHANGED_TESTS" ]; then
            echo "‚úÖ No test files modified. Skipping tests..."
            exit 0
          fi
          echo "üîç Running tests for changed files:"
          echo "$CHANGED_TESTS"
          fvm flutter test $CHANGED_TESTS --exclude-tags=units
    publishing:
      email:
        recipients:
          - $EMAIL_DANIEL
        notify:
          success: true
          failure: true
      slack:
        channel: '#build-notifications'
        notify_on_build_start: true
        notify:
          success: true
          failure: true
  comprehensive-check:
    name: Comprehensive Check
    instance_type: linux_x2
    environment:
      groups:
        - notification_emails
        - ripple_arc
      flutter: 3.32.0
    cache:
      cache_paths:
        - .fvm/
        - ~/.gradle/caches
        - ~/.pub-cache
        - $FLUTTER_ROOT/.pub-cache
    scripts:
      - name: Check for FORCE_FAIL
        script: |
          if [ "$FORCE_FAIL" = "true" ]; then
            echo "FORCE_FAIL is true. Failing the workflow."
            exit 1
          fi
      - name: Install FVM
        script: dart pub global activate fvm
      - name: Install Flutter version via FVM
        script: fvm install
      - name: Clone and Checkout
        script: |
          git clone $CM_REPO_URL .
          git checkout $CM_COMMIT

      - name: Install Dependencies
        script: |
          export PATH="$PATH":"$HOME/.pub-cache/bin":"$FCI_BUILD_DIR/.fvm/flutter_sdk/bin"
          fvm flutter pub get

      - name: Run Code Analysis
        script: |
          export PATH="$PATH":"$HOME/.pub-cache/bin":"$FCI_BUILD_DIR/.fvm/flutter_sdk/bin"
          echo "üõ†Ô∏è Running Flutter analysis..."
          fvm flutter analyze --fatal-infos --fatal-warnings .

      - name: Run Unit Tests With Coverage Report
        script: |
          export PATH="$PATH":"$HOME/.pub-cache/bin":"$FCI_BUILD_DIR/.fvm/flutter_sdk/bin"
          TARGET=$ARC_CODE_COVERAGE_TARGET
          if git log -1 --pretty=%B | grep -Eq "#DeltaCoverageLow|DCL"; then
            TARGET=$CODE_COVERAGE_MINIMUM
            echo "Using minimum coverage target: ${TARGET}% "
          fi
          sudo apt-get install -y lcov
          mkdir -p test-results
          flutter test test/units --coverage --machine > test-results/flutter.json
          lcov --remove coverage/lcov.info '**/*.g.dart' '**/l10n/**' -o coverage/lcov.info
          # Compute coverage
          if [ ! -f "coverage/lcov.info" ] || [ ! -s "coverage/lcov.info" ]; then
            echo "‚ùå Coverage file coverage/lcov.info is missing or empty."
            exit 1
          fi

          LF_RAW=$(grep '^LF:' coverage/lcov.info | cut -d: -f2 || true)
          LH_RAW=$(grep '^LH:' coverage/lcov.info | cut -d: -f2 || true)

          if [ -z "$LF_RAW" ]; then
              LF_SUM=0
          else
              LF_SUM=$(echo "$LF_RAW" | awk '{sum+=$1} END {print sum}')
          fi

          if [ -z "$LH_RAW" ]; then
              LH_SUM=0
          else
              LH_SUM=$(echo "$LH_RAW" | awk '{sum+=$1} END {print sum}')
          fi

          if ! [[ "$LF_SUM" =~ ^[0-9]+$ ]]; then
              echo "‚ùå LF_SUM ($LF_SUM) is not a valid number. Cannot calculate coverage."
              exit 1
          fi
          if ! [[ "$LH_SUM" =~ ^[0-9]+$ ]]; then
              echo "‚ö†Ô∏è LH_SUM ($LH_SUM) is not a valid number. Assuming 0 lines hit for calculation."
              LH_SUM=0
          fi

          if [ "$LF_SUM" -eq 0 ]; then
            COVERAGE_PERCENT="0.00"
            echo "‚ö†Ô∏è LF (total lines found) is 0. Setting coverage to 0.00%."
          else
            COVERAGE_PERCENT=$(echo "scale=2; $LH_SUM*100/$LF_SUM" | bc)
          fi
          
          echo "Code Coverage: ${COVERAGE_PERCENT}%"
          
          if (( $(echo "$COVERAGE_PERCENT < $TARGET" | bc -l) )); then
            echo "‚ùå Coverage is $COVERAGE_PERCENT%, below $TARGET%"
            exit 1
          else
            echo "‚úÖ Coverage is $COVERAGE_PERCENT% (>= $TARGET%)"
          fi
        test_report: test-results/flutter.json

      - name: Run Widget Tests
        script: |
          if find test/widgets -type f -name "*.dart" | grep -q .; then
            flutter test test/widgets
          else
            echo "No widget tests found. Skipping."
          fi

      - name: Run Screenshot Tests
        script: |
          if find test/screenshots -type f -name "*.dart" | grep -q .; then
            flutter test test/screenshots
          else
            echo "No screenshot tests found. Skipping."
          fi

      - name: Mutation Testing
        script: |
          echo "üß¨ Cloning origin branch..."
          git fetch --unshallow || true
          git fetch origin $BASE_BRANCH:refs/remotes/origin/$BASE_BRANCH
          BASE_COMMIT=$(git merge-base HEAD origin/$BASE_BRANCH)
          if [ -z "$BASE_COMMIT" ]; then
          echo "‚ö†Ô∏è Warning: Unable to determine base commit. Skipping mutation tests to avoid false negatives."
          exit 0
          fi
          echo "üß¨ Checking for changed mutation config files..."
          CHANGED_FILES=$(git diff --name-only --diff-filter=d "$BASE_COMMIT" -- "test/mutations/*.xml")
          
          if [ -z "$CHANGED_FILES" ]; then
          echo "‚úÖ No changed mutation config files detected. Skipping mutation tests."
          exit 0
          fi
          
          echo "Found changed mutation config files:"
          echo "$CHANGED_FILES"
          
          echo "üß™ Running mutation tests..."
          dart run mutation_test $CHANGED_FILES --no-builtin

      - name: Build Android Debug
        script: |
          flutter build apk --flavor fishfood

    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - coverage/*
      - test-results/flutter.json
      - mutation-test-report/*
    publishing:
      email:
        recipients:
          - $EMAIL_DANIEL
        notify:
          success: true
          failure: true
      slack:
        channel: '#build-notifications'
        notify_on_build_start: true
        notify:
          success: true
          failure: true
  periodic-check:
    name: Periodic Check
    instance_type: linux_x2
    environment:
      groups:
        - notification_emails
        - ripple_arc
      flutter: 3.32.0
      ubuntu: 24.04
    cache:
      cache_paths:
        - .fvm/
        - ~/.gradle/caches
        - ~/.pub-cache
        - ios/Pods
        - $FLUTTER_ROOT/.pub-cache
        - /usr/local/Homebrew
        - /usr/local/bin/lcov
    scripts:
      - name: Install FVM
        script: dart pub global activate fvm
      - name: Install Flutter version via FVM
        script: fvm install
      - name: Clone and Checkout
        script: |
          git clone $CM_REPO_URL .
          git checkout $BASE_BRANCH

      - name: Install Dependencies
        script: |
          export PATH="$PATH":"$HOME/.pub-cache/bin":"$FCI_BUILD_DIR/.fvm/flutter_sdk/bin"
          fvm flutter pub get

      - name: Run Code Analysis
        script: |
          export PATH="$PATH":"$HOME/.pub-cache/bin":"$FCI_BUILD_DIR/.fvm/flutter_sdk/bin"
          echo "üõ†Ô∏è Running Flutter analysis..."
          fvm flutter analyze --fatal-infos --fatal-warnings .

      - name: Run Unit Tests With Coverage Report
        script: |
          export PATH="$PATH":"$HOME/.pub-cache/bin":"$FCI_BUILD_DIR/.fvm/flutter_sdk/bin"
          TARGET=$ARC_CODE_COVERAGE_TARGET
          if git log -1 --pretty=%B | grep -Eq "#DeltaCoverageLow|DCL"; then
            TARGET=$CODE_COVERAGE_MINIMUM
            echo "Using minimum coverage target: ${TARGET}% "
          fi
          HOMEBREW_NO_AUTO_UPDATE=1 brew install lcov
          mkdir -p test-results
          flutter test test/units --coverage --machine > test-results/flutter.json
          lcov --remove coverage/lcov.info '**/*.g.dart' '**/l10n/**' -o coverage/lcov.info
          # Compute coverage
          if [ ! -f "coverage/lcov.info" ] || [ ! -s "coverage/lcov.info" ]; then
            echo "‚ùå Coverage file coverage/lcov.info is missing or empty."
            exit 1
          fi

          LF_RAW=$(grep '^LF:' coverage/lcov.info | cut -d: -f2 || true)
          LH_RAW=$(grep '^LH:' coverage/lcov.info | cut -d: -f2 || true)

          if [ -z "$LF_RAW" ]; then
              LF_SUM=0
          else
              LF_SUM=$(echo "$LF_RAW" | awk '{sum+=$1} END {print sum}')
          fi

          if [ -z "$LH_RAW" ]; then
              LH_SUM=0
          else
              LH_SUM=$(echo "$LH_RAW" | awk '{sum+=$1} END {print sum}')
          fi

          if ! [[ "$LF_SUM" =~ ^[0-9]+$ ]]; then
              echo "‚ùå LF_SUM ($LF_SUM) is not a valid number. Cannot calculate coverage."
              exit 1
          fi
          if ! [[ "$LH_SUM" =~ ^[0-9]+$ ]]; then
              echo "‚ö†Ô∏è LH_SUM ($LH_SUM) is not a valid number. Assuming 0 lines hit for calculation."
              LH_SUM=0
          fi

          if [ "$LF_SUM" -eq 0 ]; then
            COVERAGE_PERCENT="0.00"
            echo "‚ö†Ô∏è LF (total lines found) is 0. Setting coverage to 0.00%."
          else
            COVERAGE_PERCENT=$(echo "scale=2; $LH_SUM*100/$LF_SUM" | bc)
          fi

          echo "Code Coverage: ${COVERAGE_PERCENT}%"

          if (( $(echo "$COVERAGE_PERCENT < $TARGET" | bc -l) )); then
            echo "‚ùå Coverage is $COVERAGE_PERCENT%, below $TARGET%"
            exit 1
          else
            echo "‚úÖ Coverage is $COVERAGE_PERCENT% (>= $TARGET%)"
          fi
        test_report: test-results/flutter.json

      - name: Run Widget Tests
        script: |
          if find test/widgets -type f -name "*.dart" | grep -q .; then
            flutter test test/widgets
          else
            echo "No widget tests found. Skipping."
          fi

      - name: Run Screenshot Tests
        script: |
          if find test/screenshots -type f -name "*.dart" | grep -q .; then
            flutter test test/screenshots
          else
            echo "No screenshot tests found. Skipping."
          fi

      - name: Mutation Testing
        script: |
          echo "üß¨ Looking for mutation configs in test/mutations/..."

          CONFIG_FILES=$(find test/mutations -type f -name "*.xml" | tr '\n' ' ')

          if [ -z "$CONFIG_FILES" ]; then
            echo "‚úÖ No mutation config files found. Skipping mutation tests."
            exit 0
          fi

          echo "üß™ Running mutation tests on: $CONFIG_FILES"
          dart run mutation_test $CONFIG_FILES --no-builtin

      - name: Build Android Debug
        script: |
          flutter build apk --flavor fishfood

    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - build/ios/ipa/*.ipa
      - coverage/*
      - test-results/flutter.json
      - mutation-test-report/*
    publishing:
      email:
        recipients:
          - $EMAIL_DANIEL
        notify:
          success: true
          failure: true
      slack:
        channel: '#build-notifications'
        notify_on_build_start: true
        notify:
          success: true
          failure: true
  ios-debug-build:
    name: Ios Debug Build
    instance_type: mac_mini_m2
    environment:
      groups:
        - notification_emails
        - ripple_arc
      flutter: 3.32.0
    cache:
      cache_paths:
        - .fvm/
        - ~/.pub-cache
        - ios/Pods
        - $FLUTTER_ROOT/.pub-cache
        - /usr/local/Homebrew
    scripts:
      - name: Check for FORCE_FAIL
        script: |
          if [ "$FORCE_FAIL" = "true" ]; then
            echo "FORCE_FAIL is true. Failing the workflow."
            exit 1
          fi
      - name: Install FVM
        script: dart pub global activate fvm
      - name: Install Flutter version via FVM
        script: fvm install
      - name: Clone and Checkout
        script: |
          git clone "$CM_REPO_URL" .
          git checkout "$CM_COMMIT"

      - name: Install Dependencies
        script: |
          export PATH="$PATH":"$HOME/.pub-cache/bin":"$FCI_BUILD_DIR/.fvm/flutter_sdk/bin"
          fvm flutter pub get
      - name: Install iOS Dependencies
        script: |
          cd ios
          pod install
          cd ..
      - name: Build Ios Debug
        script: |
          export PATH="$PATH":"$HOME/.pub-cache/bin":"$FCI_BUILD_DIR/.fvm/flutter_sdk/bin"
          echo "üì¶ Pre-caching iOS artifacts..."
          fvm flutter precache --ios
          fvm flutter build ios --debug --no-codesign
    artifacts:
      - build/ios/iphoneos/*.app
    publishing:
      email:
        recipients:
          - $EMAIL_DANIEL
        notify:
          success: true
          failure: true
      slack:
        channel: '#build-notifications'
        notify_on_build_start: true
        notify:
          success: true
          failure: true